<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fashion Store - Inventory System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f5f5f5;
        }

        header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        nav {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            letter-spacing: 1px;
        }

        nav ul {
            list-style: none;
            display: flex;
            gap: 2rem;
        }

        nav a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            transition: opacity 0.3s;
        }

        nav a:hover {
            opacity: 0.8;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 3rem 2rem;
        }

        .section-title {
            text-align: center;
            font-size: 2.5rem;
            margin-bottom: 2rem;
            color: #667eea;
        }

        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
            margin-bottom: 3rem;
        }

        .stat-card {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            text-align: center;
        }

        .stat-card h3 {
            color: #666;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
            text-transform: uppercase;
        }

        .stat-value {
            font-size: 2.5rem;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: #999;
            font-size: 0.85rem;
        }

        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-bottom: 3rem;
        }

        .product-card {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s;
        }

        .product-card:hover {
            transform: translateY(-5px);
        }

        .product-image {
            width: 100%;
            height: 250px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 4rem;
            color: white;
        }

        .product-info {
            padding: 1.5rem;
        }

        .product-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }

        .product-name {
            font-size: 1.3rem;
            font-weight: bold;
            color: #333;
        }

        .product-price {
            font-size: 1.5rem;
            color: #667eea;
            font-weight: bold;
        }

        .inventory-info {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 5px;
            margin: 1rem 0;
        }

        .inventory-row {
            display: flex;
            justify-content: space-between;
            padding: 0.5rem 0;
            border-bottom: 1px solid #e0e0e0;
        }

        .inventory-row:last-child {
            border-bottom: none;
        }

        .inventory-label {
            color: #666;
            font-weight: 500;
        }

        .inventory-value {
            font-weight: bold;
            color: #333;
        }

        .stock-status {
            display: inline-block;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: bold;
        }

        .in-stock {
            background: #d4edda;
            color: #155724;
        }

        .low-stock {
            background: #fff3cd;
            color: #856404;
        }

        .out-of-stock {
            background: #f8d7da;
            color: #721c24;
        }

        .purchase-controls {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .quantity-input {
            flex: 1;
            padding: 0.8rem;
            border: 2px solid #e0e0e0;
            border-radius: 5px;
            font-size: 1rem;
        }

        .buy-btn {
            flex: 2;
            padding: 0.8rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 5px;
            font-weight: bold;
            cursor: pointer;
            transition: opacity 0.3s;
        }

        .buy-btn:hover:not(:disabled) {
            opacity: 0.9;
        }

        .buy-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        .admin-panel {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-bottom: 3rem;
        }

        .admin-panel h3 {
            color: #667eea;
            margin-bottom: 1.5rem;
            font-size: 1.8rem;
        }

        .transaction-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        .transaction-table th,
        .transaction-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        .transaction-table th {
            background: #f8f9fa;
            font-weight: bold;
            color: #667eea;
        }

        .transaction-table tr:hover {
            background: #f8f9fa;
        }

        .clear-btn {
            padding: 0.8rem 1.5rem;
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 5px;
            font-weight: bold;
            cursor: pointer;
            margin-top: 1rem;
        }

        .clear-btn:hover {
            background: #c82333;
        }

        footer {
            background: #2c3e50;
            color: white;
            text-align: center;
            padding: 2rem;
            margin-top: 3rem;
        }

        @media (max-width: 768px) {
            nav ul {
                flex-direction: column;
                gap: 1rem;
            }

            .products-grid {
                grid-template-columns: 1fr;
            }

            .dashboard {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <header>
        <nav>
            <div class="logo">Fashion Store ðŸ’¼</div>
            <ul>
                <li><a href="#dashboard">Dashboard</a></li>
                <li><a href="#products">Products</a></li>
                <li><a href="#admin">Admin Panel</a></li>
            </ul>
        </nav>
    </header>

    <div class="container">
        <h2 class="section-title" id="dashboard">Store Dashboard</h2>
        
        <div class="dashboard">
            <div class="stat-card">
                <h3>Total Revenue</h3>
                <div class="stat-value" id="totalRevenue">$0</div>
                <div class="stat-label">All time sales</div>
            </div>
            <div class="stat-card">
                <h3>Items Sold</h3>
                <div class="stat-value" id="totalSold">0</div>
                <div class="stat-label">Total units</div>
            </div>
            <div class="stat-card">
                <h3>In Stock</h3>
                <div class="stat-value" id="totalStock">0</div>
                <div class="stat-label">Available items</div>
            </div>
            <div class="stat-card">
                <h3>Transactions</h3>
                <div class="stat-value" id="totalTransactions">0</div>
                <div class="stat-label">Completed orders</div>
            </div>
        </div>

        <h2 class="section-title" id="products">Product Inventory</h2>
        
        <div class="products-grid" id="productsContainer"></div>

        <div class="admin-panel" id="admin">
            <h3>ðŸ“Š Admin Panel - Sales History</h3>
            <div style="overflow-x: auto;">
                <table class="transaction-table">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Total</th>
                            <th>Date & Time</th>
                        </tr>
                    </thead>
                    <tbody id="transactionHistory"></tbody>
                </table>
            </div>
            <button class="clear-btn" onclick="clearHistory()">Clear History</button>
        </div>
    </div>

    <footer>
        <div class="footer-content">
            <p>&copy; 2025 Fashion Store. All rights reserved.</p>
            <p>CIS 221 Assignment - Part 2: Database & Inventory Management</p>
        </div>
    </footer>

    <script>
        // Initialize inventory database
        let inventory = [
            {
                id: 1,
                name: 'Classic Dress Shirt',
                icon: 'ðŸ‘”',
                price: 49.99,
                stock: 50,
                sold: 0,
                initialStock: 50
            },
            {
                id: 2,
                name: 'Evening Dress',
                icon: 'ðŸ‘—',
                price: 89.99,
                stock: 30,
                sold: 0,
                initialStock: 30
            },
            {
                id: 3,
                name: 'Designer Jeans',
                icon: 'ðŸ‘–',
                price: 79.99,
                stock: 45,
                sold: 0,
                initialStock: 45
            },
            {
                id: 4,
                name: 'Sport Sneakers',
                icon: 'ðŸ‘Ÿ',
                price: 69.99,
                stock: 40,
                sold: 0,
                initialStock: 40
            },
            {
                id: 5,
                name: 'Winter Jacket',
                icon: 'ðŸ§¥',
                price: 129.99,
                stock: 25,
                sold: 0,
                initialStock: 25
            },
            {
                id: 6,
                name: 'Designer Handbag',
                icon: 'ðŸ‘œ',
                price: 159.99,
                stock: 20,
                sold: 0,
                initialStock: 20
            }
        ];

        // Transaction history
        let transactions = [];

        // Get stock status
        function getStockStatus(stock) {
            if (stock === 0) return { class: 'out-of-stock', text: 'Out of Stock' };
            if (stock <= 10) return { class: 'low-stock', text: 'Low Stock' };
            return { class: 'in-stock', text: 'In Stock' };
        }

        // Render products
        function renderProducts() {
            const container = document.getElementById('productsContainer');
            container.innerHTML = inventory.map(product => {
                const status = getStockStatus(product.stock);
                return `
                    <div class="product-card">
                        <div class="product-image">${product.icon}</div>
                        <div class="product-info">
                            <div class="product-header">
                                <div class="product-name">${product.name}</div>
                                <div class="product-price">$${product.price.toFixed(2)}</div>
                            </div>
                            
                            <div class="inventory-info">
                                <div class="inventory-row">
                                    <span class="inventory-label">Status:</span>
                                    <span class="stock-status ${status.class}">${status.text}</span>
                                </div>
                                <div class="inventory-row">
                                    <span class="inventory-label">In Stock:</span>
                                    <span class="inventory-value">${product.stock} units</span>
                                </div>
                                <div class="inventory-row">
                                    <span class="inventory-label">Sold:</span>
                                    <span class="inventory-value">${product.sold} units</span>
                                </div>
                                <div class="inventory-row">
                                    <span class="inventory-label">Revenue:</span>
                                    <span class="inventory-value">$${(product.sold * product.price).toFixed(2)}</span>
                                </div>
                            </div>

                            <div class="purchase-controls">
                                <input type="number" 
                                       class="quantity-input" 
                                       id="qty-${product.id}" 
                                       value="1" 
                                       min="1" 
                                       max="${product.stock}"
                                       ${product.stock === 0 ? 'disabled' : ''}>
                                <button class="buy-btn" 
                                        onclick="purchaseProduct(${product.id})"
                                        ${product.stock === 0 ? 'disabled' : ''}>
                                    ${product.stock === 0 ? 'Sold Out' : 'Buy Now'}
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Purchase product
        function purchaseProduct(productId) {
            const product = inventory.find(p => p.id === productId);
            const qtyInput = document.getElementById(`qty-${productId}`);
            const quantity = parseInt(qtyInput.value);

            if (!product || quantity <= 0 || quantity > product.stock) {
                alert('Invalid quantity!');
                return;
            }

            // Update inventory
            product.stock -= quantity;
            product.sold += quantity;

            // Record transaction
            const transaction = {
                id: transactions.length + 1,
                productName: product.name,
                quantity: quantity,
                price: product.price,
                total: quantity * product.price,
                date: new Date().toLocaleString()
            };
            transactions.push(transaction);

            // Update UI
            renderProducts();
            renderTransactions();
            updateDashboard();

            // Show confirmation
            alert(`âœ… Purchase Successful!\n\n${product.name}\nQuantity: ${quantity}\nTotal: $${transaction.total.toFixed(2)}`);
        }

        // Render transactions
        function renderTransactions() {
            const tbody = document.getElementById('transactionHistory');
            if (transactions.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; color: #999;">No transactions yet</td></tr>';
                return;
            }

            tbody.innerHTML = transactions.map(t => `
                <tr>
                    <td>${t.id}</td>
                    <td>${t.productName}</td>
                    <td>${t.quantity}</td>
                    <td>$${t.price.toFixed(2)}</td>
                    <td><strong>$${t.total.toFixed(2)}</strong></td>
                    <td>${t.date}</td>
                </tr>
            `).join('');
        }

        // Update dashboard
        function updateDashboard() {
            const totalRevenue = transactions.reduce((sum, t) => sum + t.total, 0);
            const totalSold = inventory.reduce((sum, p) => sum + p.sold, 0);
            const totalStock = inventory.reduce((sum, p) => sum + p.stock, 0);

            document.getElementById('totalRevenue').textContent = `$${totalRevenue.toFixed(2)}`;
            document.getElementById('totalSold').textContent = totalSold;
            document.getElementById('totalStock').textContent = totalStock;
            document.getElementById('totalTransactions').textContent = transactions.length;
        }

        // Clear history
        function clearHistory() {
            if (confirm('Are you sure you want to clear all transaction history? This cannot be undone.')) {
                transactions = [];
                renderTransactions();
                alert('Transaction history cleared!');
            }
        }

        // Initialize
        renderProducts();
        renderTransactions();
        updateDashboard();

        // Smooth scrolling
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function(e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            });
        });
    </script>
</body>
</html>
